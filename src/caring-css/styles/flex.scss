/*
 * @Author: Wanko
 * @Date: 2022-05-31 17:19:10
 * @LastEditors: Wanko
 * @LastEditTime: 2023-10-25 14:22:44
 * @Description: 
 */

// 水平垂直居中
.flex-cc {
  display: flex;
  align-items: center;
  justify-content: center;
}
// 水平居中
.flex-center {
  display: flex;
  align-items: center;
}

@each $key, $value in row row, row-reverse row-reverse, col column,
  col-reverse column-reverse
{
  .flex-#{$key} {
    display: flex;
    flex-direction: #{$value};
  }
}

// Flex Wrap
@each $key in wrap, wrap-reverse, nowrap {
  .flex-#{$key} {
    display: flex;
    flex-wrap: #{$key};
  }
}

@for $i from 0 through 6 {
  .flex-#{$i} {
    flex: $i;
  }
}
.flex-auto {
  flex: 1 1 auto;
}
.flex-initial {
  flex: 0 1 auto;
}
.flex-none {
  flex: none;
}

@for $i from 0 through 6 {
  .flex-#{$i} {
    flex: $i;
  }
  .order-#{$i} {
    order: $i;
  }
}
.order-first {
  order: -9999;
}
.order-last {
  order: 9999;
}

@for $i from 0 through 20 {
  @if $i % 2 == 0 or $i % 5 == 0 {
    .gap-#{$i} {
      gap: #{$i}px;
    }

    .gap-x-#{$i} {
      column-gap: #{$i}px;
    }

    .gap-y-#{$i} {
      row-gap: #{$i}px;
    }
  }
}

//Justify Content
// 用于控制 flex 和 grid 项目如何沿着容器的主轴定位的功能类。
@each $key, $value in start flex-start, center center, end flex-end,
  between space-between, around space-around, evenly space-evenly
{
  .justify-#{$key} {
    display: flex;
    justify-content: #{$value};
  }
}

@each $key, $value in start flex-start, center center, end flex-end,
  stretch stretch, baseline baseline
{
  // align-stretch
  // 默认值，即flex容器内的子元素默认会拉伸和父元素一样的高度
  .items-#{$key} {
    display: flex;
    align-items: #{$value};
  }
}

// 控制单个 flex 或网格项如何沿其容器的交叉轴定位的功能类。
@each $key, $value in auto, auto, start flex-start, center center, end flex-end,
  stretch stretch, baseline flex-baseline
{
  .self-#{$key} {
    align-self: #{$value};
  }
}

// 控制 flex 项目缩小的功能类
.flex-shrink-0 {
  flex-shrink: 0;
}
.flex-shrink {
  flex-shrink: 1;
}
// 控制 flex 项目放大的功能类
.flex-grow-0 {
  flex-grow: 0; // 默认
}
.flex-grow {
  // 等同于flex:1的效果
  flex-grow: 1;
}

@each $key, $value in center center, start flex-start, end flex-end,
  between space-between, around space-around, evenly space-evenly
{
  .content-#{$key} {
    align-content: #{$value};
  }
}
// 使用 grid-cols-{n} 功能类来创建有 n 个同等大小的列的网格。
@for $i from 1 through 6 {
  .grid-#{$i} {
    display: grid;
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
  .grid-cols-#{$i} {
    grid-template-columns: repeat($i, minmax(0, 1fr));
  }
  .grid-rows-#{$i} {
    // 和grid-flow-col搭配使用才会有效果，单独使用没有效果
    grid-template-rows: repeat($i, minmax(0, 1fr));
  }
  // 用于控制在网格列中元素的大小和放置方式的功能类。
  // 使用 col-span-{n} 功能类使元素跨越 n 列。

  .col-span-#{$i} {
    grid-column: span $i / span $i;
  }
  .row-span-#{$i} {
    grid-row: span $i / span $i;
  }
}
.grid-cols-none {
  grid-template-columns: none;
}
.grid-rows-none {
  grid-template-rows: none;
}
.col-auto {
  grid-column: auto;
}
.col-span-full {
  grid-column: 1 / -1;
}
.row-auto {
  grid-row: auto;
}
.row-span-full {
  grid-row: 1 / -1;
}

// 用于控制网格中元素如何自动放置的功能类。
@each $key, $value in row, row, col column, row-dense row dense,
  col-dense column dense
{
  .grid-flow-#{$key} {
    grid-auto-flow: #{$value};
  }
}

// 用于控制网格项目如何沿其内联轴对齐的功能类。
@each $key in start, end, center, stretch {
  .justify-items-#{$key} {
    justify-items: #{$key};
  }
}

@each $key in auto, start, end, center, stretch {
  .justify-self-#{$key} {
    justify-self: #{$key};
  }
}
